#pragma once

enum GLOBAL_CONSTANT
{
	//FREE_WIZARD_NET_SERVER_PORT = 9624,
	//WIZARD_NET_SERVER_PORT = 9621,
	//JW2_PEER_TO_PEER_PORT = 9913,
	//JW2_PEER_TO_PEER_PORT = 9922,

	SERVER_PORT = 27050,
	CLIENT_UNIT_SIZE = 64,
	CLIENT_UNIT_COUNT = 16,
	CLIENT_COUNT = CLIENT_UNIT_SIZE * CLIENT_UNIT_COUNT,

	BUFFER_UNIT_SIZE = 8,
	BUFFER_UNIT_COUNT = 256,
	BUFFER_SIZE = BUFFER_UNIT_SIZE * BUFFER_UNIT_COUNT,

	STACK_UNIT_SIZE = 8,
	STACK_UNIT_COUNT = 128,
	STACK_SIZE = STACK_UNIT_SIZE * STACK_UNIT_COUNT,

	SERIAL_BYTE_QUEUE_UNIT_SIZE = 8,
	SERIAL_BYTE_QUEUE_UNIT_COUNT = 32,
	SERIAL_BYTE_QUEUE_SIZE = SERIAL_BYTE_QUEUE_UNIT_SIZE * SERIAL_BYTE_QUEUE_UNIT_COUNT,

	SERIAL_PACKET_QUEUE_UNIT_SIZE = 8,
	SERIAL_PACKET_QUEUE_UNIT_COUNT = 32,
	SERIAL_PACKET_QUEUE_SIZE = SERIAL_PACKET_QUEUE_UNIT_SIZE * SERIAL_PACKET_QUEUE_UNIT_COUNT,

	SERIAL_BYTE_DOUBLE_ENDED_QUEUE_UNIT_SIZE = 8,
	SERIAL_BYTE_DOUBLE_ENDED_QUEUE_UNIT_COUNT = 32,
	SERIAL_BYTE_DOUBLE_ENDED_QUEUE_SIZE = SERIAL_BYTE_DOUBLE_ENDED_QUEUE_UNIT_SIZE * SERIAL_BYTE_DOUBLE_ENDED_QUEUE_UNIT_COUNT,

	BYTE_QUEUE_UNIT_SIZE = 8,
	BYTE_QUEUE_UNIT_COUNT = 512,
	BYTE_QUEUE_SIZE = BYTE_QUEUE_UNIT_SIZE * BYTE_QUEUE_UNIT_COUNT,

	QUEUE_UNIT_SIZE = 8,
	QUEUE_UNIT_COUNT = 128,
	QUEUE_SIZE = QUEUE_UNIT_SIZE * QUEUE_UNIT_COUNT,

	POOL_UNIT_SIZE = SERIAL_BYTE_DOUBLE_ENDED_QUEUE_SIZE,
	POOL_UNIT_COUNT = CLIENT_COUNT * QUEUE_SIZE / SERIAL_BYTE_DOUBLE_ENDED_QUEUE_SIZE,
	POOL_SIZE = POOL_UNIT_SIZE * POOL_UNIT_COUNT,

	THREAD_LOCAL_PIECE_COUNT = SERIAL_BYTE_DOUBLE_ENDED_QUEUE_SIZE,
	THREAD_LOCAL_CHUNK_COUNT = CLIENT_COUNT * QUEUE_SIZE / THREAD_LOCAL_PIECE_COUNT, //(CLIENT_COUNT * QUEUE_SIZE / THREAD_LOCAL_PIECE_COUNT) / 2
	THREAD_LOCAL_POOL_SIZE = THREAD_LOCAL_PIECE_COUNT * THREAD_LOCAL_CHUNK_COUNT,

	DEFAULT_SUB_THREAD_STACK_SIZE = 0, //1048576, //1024 * 1024,
	SUB_THREAD_STACK_SIZE = DEFAULT_SUB_THREAD_STACK_SIZE,

	WORK_RECORD_COUNT = 20480,

	MAXIMUM_QUERY_LENGTH = 2048,

	TIMER_FRAME_RATE = 60, //FRAME_RATE

	GLOBAL_CONSTANT_COUNT
};

enum QUERY_INDEX
{
	QUERY_COUNT
};

enum LOG_LEVEL_INDEX
{
	LOG_LEVEL_DEBUG,
	LOG_LEVEL_WARNING,
	LOG_LEVEL_ERROR,
	LOG_LEVEL_SYSTEM,

	LOG_LEVEL_COUNT
};

enum SOURCE_AND_TARGET_INDEX
{
	FROM_CLIENT_TO_SERVER,
	FCTS,
	CS,
	FROM_SERVER_TO_CLIENT,
	FSTC,
	SC,

	SOURCE_AND_TARGET_COUNT
};

enum REQUEST_INDEX
{
	REQUEST,

	REQUEST_COUNT
};

enum RESPONSE_INDEX
{
	RESPONSE,

	RESPONSE_COUNT
};

enum POSITIVE_INTEGER_INDEX //GLOBAL_CONSTANT_INDEX
{
	POSITIVE_INTEGER,
	POSITIVE_INTEGER_COUNT
};

enum NORMAL_INTEGER_INDEX
{
	NORMAL_INTEGER,
	NORMAL_INTEGER_COUNT
};

enum REAL_NUMBER_INDEX
{
	REAL_NUMBER,
	REAL_NUMBER_COUNT
};

enum LARGE_REAL_NUMBER_INDEX
{
	LARGE_REAL_NUMBER,
	LARGE_REAL_NUMBER_COUNT
};

enum TEXT_INDEX
{
	TEXT,
	TEXT_COUNT
};

enum IMAGE_INDEX
{
	IMAGE,
	IMAGE_COUNT
};

enum DELIMITER_INDEX
{
	SPACE,
	COMMA,
	DOT,
	COLON,
	SEMI_COLON,
	EQUAL,
	TAB,
	CARRAGE_RETURN,
	LINE_FEED,
	DELIMITER_COUNT
};

enum SCENE_INDEX
{
	SCENE,
	SCENE_COUNT
};

enum VIDEO_BUFFER_INDEX
{
	PRIMARY_VIDEO_BUFFER,
	BACK_VIDEO_BUFFER,
	VIDEO_BUFFER_COUNT,
};

typedef enum GLOBAL_CONSTANT GLOBAL_CONSTANT;

typedef enum POSITIVE_INTEGER_INDEX POSITIVE_INTEGER_INDEX;
typedef enum NORMAL_INTEGER_INDEX NORMAL_INTEGER_INDEX;
typedef enum REAL_NUMBER_INDEX REAL_NUMBER_INDEX;
typedef enum LARGE_REAL_NUMBER_INDEX LARGE_REAL_NUMBER_INDEX;
typedef enum TEXT_INDEX TEXT_INDEX;
typedef enum DELIMITER_INDEX DELIMITER_INDEX;

typedef enum SCENE_INDEX SCENE_INDEX;
typedef enum VIDEO_BUFFER_INDEX VIDEO_BUFFER_INDEX;

//using SI = enum SCENE_INDEX;
//using VBI = enum SCENE_INDEX;
//using PI = enum PLAYER_INDEX;
//using EI = enum ENEMY_INDEX;									